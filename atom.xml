<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://targetnobug.github.io/</id>
    <title>MPLWade‘s Blog</title>
    <updated>2020-03-10T21:11:14.442Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://targetnobug.github.io/"/>
    <link rel="self" href="https://targetnobug.github.io//atom.xml"/>
    <subtitle>温故而知新，掌握那些你能够掌握的，剩余的交给上帝。。</subtitle>
    <logo>https://targetnobug.github.io//images/avatar.png</logo>
    <icon>https://targetnobug.github.io//favicon.ico</icon>
    <rights>All rights reserved 2020, MPLWade‘s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Hello My Visitor]]></title>
        <id>https://targetnobug.github.io//post/hello-gridea</id>
        <link href="https://targetnobug.github.io//post/hello-gridea">
        </link>
        <updated>2025-01-03T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎光临 <strong>MPLWade的小书桌</strong> ！<br>
✍️  <strong>MPLWade的小书桌</strong> 记录了番茄鶸的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎光临 <strong>MPLWade的小书桌</strong> ！<br>
✍️  <strong>MPLWade的小书桌</strong> 记录了番茄鶸的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/TargetNoBug">Github</a></p>
<h2 id="mplwade简介">MPLWade简介👇</h2>
<ul>
<li>
<p>2017年 本科毕业</p>
</li>
<li>
<p>2017年三月 金蝶国际软件集团（北京）开始实习工作 至 2017年六月</p>
</li>
<li>
<p>2018年至今 拖拖控件这样子</p>
</li>
</ul>
<h2 id="关于爱好">关于爱好</h2>
<ul>
<li>伟大的中国特色社会主义荣光下的足球</li>
<li>伟大的中国特色社会主义荣光下的摄影（包括不仅限于Mobil）</li>
<li>伟大的中国特色社会主义荣光下的阅读（电子书，实体书都很喜欢，更多情况下在阅读电子书）</li>
<li>伟大的中国特色社会主义荣光下的电子竞技游戏（包括不仅限于LOL，NBA2K）</li>
</ul>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[项目小策略]]></title>
        <id>https://targetnobug.github.io//post/xiang-mu-xiao-ce-lue</id>
        <link href="https://targetnobug.github.io//post/xiang-mu-xiao-ce-lue">
        </link>
        <updated>2020-02-25T13:52:10.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>场景：用户未登录情况下，两个或多个页面显示空白提示信息<br>
解决：可设置统一访客试图，依据判断条件(比如是否登陆)进行是否增加访客视图覆盖放置的操作</p>
<pre><code> 2. 场景：用户未登录情况下，部分模块不可显示
 		 解决：可通过访问Json文件的方式(请求后台数据返回Json结果)，增加或减少UITabBarController的子控制器数量</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每月思考问题]]></title>
        <id>https://targetnobug.github.io//post/month_explorer</id>
        <link href="https://targetnobug.github.io//post/month_explorer">
        </link>
        <updated>2019-08-07T08:45:06.000Z</updated>
        <summary type="html"><![CDATA[<p>🐜 鶸眼前划过的疑问，大佬提出的问题，在这一部分记录，想出办法尽最大程度探索非单一解并寻找出最优解。。</p>
]]></summary>
        <content type="html"><![CDATA[<p>🐜 鶸眼前划过的疑问，大佬提出的问题，在这一部分记录，想出办法尽最大程度探索非单一解并寻找出最优解。。</p>
<!-- more -->
<h2 id="8月15日前">8月15日前：</h2>
<blockquote>
<p><strong>1. @property与成员变量的区别 （8.07）</strong></p>
<blockquote>
<p><a href="https://www.jianshu.com/p/b8807f891828https://www.jianshu.com/p/b8807f891828">简书讲解的特别好</a></p>
</blockquote>
</blockquote>
<blockquote>
<p><strong>2. 安装包瘦身（8.07）</strong></p>
<blockquote>
<p>1&gt; 去无用img,去除无用的静态库,wait more.......<br>
去除无用img可使用<a href="!https://github.com/tinymind/LSUnusedResources">LSUnusedResources</a><br>
2&gt; 去除无用的类，没有用到的方法<br>
可用<a href="!https://github.com/dblock/fui">fui</a></p>
</blockquote>
</blockquote>
<blockquote>
<p><strong>3. 一次加载足够多数据，flutter下内存占用与UITableView的对比 (8.08)</strong></p>
</blockquote>
<blockquote>
<p><strong>4. runtime（8.27-9.07）</strong></p>
<blockquote>
<p>1.（方法交换，动态添加方法，添加属性，自动生成属性，字典转模型）解决Runtime相关的基本问题（至少面试可以回答出一些东西的）<br>
2.（3篇性能优化：内存。runloop，界面）性能优化，总结出一篇自己多方查阅资料实践然后归纳整理出自己经验所得的文章<br>
3.（2篇）runloop 不能再被问住了<br>
4.（5篇）网络工作原理tcp协议、ssl协议、http协议、udp协议、socket原理（每个部分简书写一篇归纳所得文章）<br>
5. atomic原子性操作，一定线程安全吗？为什么不安全？如何改善？好处是什么？</p>
</blockquote>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[响应者链条与圆形按钮]]></title>
        <id>https://targetnobug.github.io//post/xiang-ying-zhe-lian-tiao-yu-yuan-xing-an-niu</id>
        <link href="https://targetnobug.github.io//post/xiang-ying-zhe-lian-tiao-yu-yuan-xing-an-niu">
        </link>
        <updated>2017-08-24T19:51:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-事件传递过程">一 . “事件传递过程”</h1>
<h2 id="1问题描述">1.问题描述</h2>
<h3 id="1-a和c是普通的view-b是一个绑定事件的按钮a添加了点击手势-此时点击c响应a的tap手势事件还是b的按钮点击事件">1. A和C是普通的view, B是一个绑定事件的按钮，A添加了点击手势。 此时点击C，响应A的tap手势事件？还是B的按钮点击事件？</h3>
<p><img src="https://upload-images.jianshu.io/upload_images/4395241-72327d4221a72fc4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="视图布局示例"></p>
<h2 id="2-运行结果">2. 运行结果</h2>
<blockquote>
<ol>
<li>C视图开启用户交互时，此次响应的是A视图的tap手势事件</li>
<li>禁用C视图用户交互时，此次响应的是B视图的按钮点击事件</li>
</ol>
</blockquote>
<hr>
<p><strong>但是为啥？</strong></p>
<h2 id="3触摸事件">3.触摸事件</h2>
<blockquote>
<p>1&gt; 只要继承<strong>UIResponder</strong>就能能够响应并处理触摸事件<br>
2&gt; <strong>UIResponder</strong>包三种事件：<strong>触摸事件</strong>、<strong>加速计事件</strong>、<strong>远程控制事件</strong></p>
</blockquote>
<h3 id="触摸事件方法">触摸事件方法</h3>
<pre><code>- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;
</code></pre>
<p>以上三个方法中，其中都包含着<strong>UITouch</strong>对象。</p>
<blockquote>
<p>1&gt; UITouch的作用就是它会保存着这个手指相关的一些信息，触摸时间，位置，阶段等之类的信息。</p>
</blockquote>
<blockquote>
<p>2&gt; 当手指移动时，系统会更新同一个UITouch对象，使之能够一直保存该手指在的触摸位置, 当手指头离开屏幕的时候，那么与之对应的UITouch对象就会销毁了。</p>
</blockquote>
<h3 id="uitouch的属性">UITouch的属性</h3>
<pre><code>触摸产生时所处的窗口
@property(nonatomic,readonly,retain) UIWindow    *window;

触摸产生时所处的视图
@property(nonatomic,readonly,retain) UIView      *view;

短时间内点按屏幕的次数，可以根据tapCount判断单击、双击或更多的点击
@property(nonatomic,readonly) NSUInteger          tapCount;

记录了触摸事件产生或变化时的时间，单位是秒
@property(nonatomic,readonly) NSTimeInterval      timestamp;

当前触摸事件所处的状态
@property(nonatomic,readonly) UITouchPhase        phase; 
</code></pre>
<p>其中的<strong>UITouchPhase</strong>是一个枚举类型，包含：</p>
<blockquote>
<p>UITouchPhaseBegan（触摸开始）<br>
UITouchPhaseMoved（接触点移动）<br>
UITouchPhaseStationary（接触点无移动）<br>
UITouchPhaseEnded（触摸结束）<br>
UITouchPhaseCancelled（触摸取消）</p>
</blockquote>
<h3 id="uitouch的方法">UITouch的方法</h3>
<pre><code>- (CGPoint)locationInView:(UIView *)view;
返回值表示触摸在view上的位置
这里返回的位置是针对view的坐标系的（以view的左上角为原点(0, 0)）
调用时传入的view参数为nil的话，返回的是触摸点在UIWindow的位置

- (CGPoint)previousLocationInView:(UIView *)view;
该方法记录了前一个触摸点的位置
</code></pre>
<h2 id="事件的产生和传递">事件的产生和传递</h2>
<blockquote>
<p>触摸开始，系统会讲触摸事件传递给UIApplication加入到管理的<strong>先进先出</strong>顺序的事件队列中。</p>
<p><strong>UIApplication</strong>按照<strong>先进先出</strong>的规则将事件逐个分发进行处理 ，通常会先分发给程序的<strong>keyWindow</strong>即主窗口，主窗口向下分发到 UIViewController的View，控制器View的视图，视图的子视图，直到寻找到最合适的视图处理触摸事件。</p>
</blockquote>
<hr>
<p><img src="https://upload-images.jianshu.io/upload_images/4395241-307eeb8119016683.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多层级关系.png"></p>
<h3 id="事件传递顺序">事件传递顺序</h3>
<blockquote>
<p>当我们点击了绿色的view的时候，事件是这样传递的，UIApplication -&gt; UIWindow -&gt; 白色的view -&gt; 绿色view</p>
<p>当我们点击了蓝色的view，事件是这样传递的，UIApplication -&gt; &gt;UIWindow -&gt; 白色的view -&gt; 橙色的view -&gt; 蓝色的view</p>
</blockquote>
<p>触摸事件的传递是由父控件传递到子控件，若父控件不能接受触摸事件，诸如：</p>
<blockquote>
<p>不允许与用户交互userInteractionEnabled = NO，<br>
这个控件隐藏了hidden = YES<br>
透明度太小了alpha = 0.0 ~ 0.01</p>
</blockquote>
<p>那么子控件就不可能接受触摸事件。</p>
<h3 id="找到最合适的控件来处理这个触摸事件的呢其实步骤是这样的">找到最合适的控件来处理这个触摸事件的呢？其实步骤是这样的：</h3>
<blockquote>
<ul>
<li>首先它会判断它自己是否能接受触摸事件，如果它不能接收触摸事件，那么它肯定不是最合适的。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>然后再判断用户手指的触摸点是否在它自己的身上，如果不在，那么他就不是最合适的。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>执行完上面两个操作，然后从后往前遍历子控件（意思是先遍历后加入的子控件），然后重复上面的两个步骤。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>如果没有找到复合条件的子控件，那么它自己就是最适合处理事件的控件。</li>
</ul>
</blockquote>
<pre><code>//这个方法就是用来查找最合适处理事件的方法，这个方法可以和第二个方法联合使用
- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event

//这个方法就是用来判断触摸点是否在其身上，返回一个BOOL值 
- (BOOL)pointInside:(CGPoint)point withEvent:(nullable UIEvent *)event;

</code></pre>
<hr>
<h1 id="二-hittest方法底层实现">二. “hitTest:方法底层实现”</h1>
<pre><code>/**
 * 作用: 寻找最适合响应的View
 * 何时调用: 当一个事件传递给当前View的时候，hitTest:方法就会调用
 * 返回值是啥: 返回的是哪个View，这个View就是最合适响应的View（随后该View就会调用它的touch方法）
 */
- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event {
    // 1.判断自己能否接收事件
    if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt;= 0.01) {
        return nil;
    }
    // 2.判断点是不是在自己身上
    if (![self pointInside:point withEvent:event]) {
        return nil;
    }
    // 3.遍历在子控件，调用子控件的hitTest
    int count = (int)self.subviews.count;
    for (int i = count - 1; i &gt;= 0; i--) { //取子控件规则，又后添加的向前筛选
        UIView *childView = self.subviews[i];
        // 转换成自控件身上的坐标系的点
        CGPoint childViewPoint = [self convertPoint:point toView:childView];
        UIView *fitView = [childView hitTest:childViewPoint withEvent:event];
        if (fitView){ // 子控件上有合适的View则返回该View
            return childView;
        }
    }
    // 没有找到合适的子控件，自己则为合适的响应视图
    return self;
}

/**
 *  作用：判断当前点在不在它调用View上（谁调用了pointInside，这个View就是谁）
 *  何时调用: hitTest:方法内，系统自动就会调用
 *  注意点: point点必须得和它的方法的调用者在同一坐标系里边儿（就是说View1调用了，就得是View1的坐标系）
 */
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event {
    BOOL isMe = [super pointInside:point withEvent:event];
    return isMe;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Future]]></title>
        <id>https://targetnobug.github.io//post/myfuture</id>
        <link href="https://targetnobug.github.io//post/myfuture">
        </link>
        <updated>2016-02-02T04:32:01.000Z</updated>
        <summary type="html"><![CDATA[<p>·👨‍💻 鶸只有计划，不谈未来。。</p>
]]></summary>
        <content type="html"><![CDATA[<p>·👨‍💻 鶸只有计划，不谈未来。。</p>
<!-- more -->
<h2 id="学历">学历</h2>
<ul>
<li>doctor</li>
</ul>
<h2 id="大厂">大厂</h2>
<h2 id="每月一篇博客">每月一篇博客</h2>
<h2 id="提升-不分先后">提升 (不分先后)</h2>
<blockquote>
<p>1.性能优化<br>
2.多线程编程<br>
3.网络原理网络编程<br>
4.Runloop<br>
5.Runtime<br>
6.设计模式MVVM(KVO,Delegate,RAC)<br>
7.图文混排 CoreText(YYLabel 源码)<br>
想起来接着加。。。。。。</p>
</blockquote>
]]></content>
    </entry>
</feed>