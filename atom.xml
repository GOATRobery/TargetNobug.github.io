<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://targetnobug.github.io/</id>
    <title>MPLWade‘s Blog</title>
    <updated>2020-03-12T20:26:49.547Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://targetnobug.github.io/"/>
    <link rel="self" href="https://targetnobug.github.io//atom.xml"/>
    <subtitle>温故而知新，总有收获。。</subtitle>
    <logo>https://targetnobug.github.io//images/avatar.png</logo>
    <icon>https://targetnobug.github.io//favicon.ico</icon>
    <rights>All rights reserved 2020, MPLWade‘s Blog</rights>
    <entry>
        <title type="html"><![CDATA[响应者链条与圆形按钮]]></title>
        <id>https://targetnobug.github.io//post/xiang-ying-zhe-lian-tiao-yu-yuan-xing-an-niu</id>
        <link href="https://targetnobug.github.io//post/xiang-ying-zhe-lian-tiao-yu-yuan-xing-an-niu">
        </link>
        <updated>2017-08-24T19:51:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-事件传递过程">一 . “事件传递过程”</h1>
<h2 id="1问题描述">1.问题描述</h2>
<h3 id="1-a和c是普通的view-b是一个绑定事件的按钮a添加了点击手势-此时点击c响应a的tap手势事件还是b的按钮点击事件">1. A和C是普通的view, B是一个绑定事件的按钮，A添加了点击手势。 此时点击C，响应A的tap手势事件？还是B的按钮点击事件？</h3>
<p><img src="https://upload-images.jianshu.io/upload_images/4395241-72327d4221a72fc4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="视图布局示例"></p>
<h2 id="2-运行结果">2. 运行结果</h2>
<blockquote>
<ol>
<li>C视图开启用户交互时，此次响应的是A视图的tap手势事件</li>
<li>禁用C视图用户交互时，此次响应的是B视图的按钮点击事件</li>
</ol>
</blockquote>
<p><strong>但是为啥？</strong></p>
<h2 id="3触摸事件">3.触摸事件</h2>
<blockquote>
<p>1&gt; 只要继承<strong>UIResponder</strong>就能能够响应并处理触摸事件<br>
2&gt; <strong>UIResponder</strong>包三种事件：<strong>触摸事件</strong>、<strong>加速计事件</strong>、<strong>远程控制事件</strong></p>
</blockquote>
<h3 id="触摸事件方法">触摸事件方法</h3>
<pre><code>- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;
</code></pre>
<p>以上三个方法中，其中都包含着<strong>UITouch</strong>对象。</p>
<blockquote>
<p>1&gt; UITouch的作用就是它会保存着这个手指相关的一些信息，触摸时间，位置，阶段等之类的信息。</p>
</blockquote>
<blockquote>
<p>2&gt; 当手指移动时，系统会更新同一个UITouch对象，使之能够一直保存该手指在的触摸位置, 当手指头离开屏幕的时候，那么与之对应的UITouch对象就会销毁了。</p>
</blockquote>
<h3 id="uitouch的属性">UITouch的属性</h3>
<pre><code>触摸产生时所处的窗口
@property(nonatomic,readonly,retain) UIWindow    *window;

触摸产生时所处的视图
@property(nonatomic,readonly,retain) UIView      *view;

短时间内点按屏幕的次数，可以根据tapCount判断单击、双击或更多的点击
@property(nonatomic,readonly) NSUInteger          tapCount;

记录了触摸事件产生或变化时的时间，单位是秒
@property(nonatomic,readonly) NSTimeInterval      timestamp;

当前触摸事件所处的状态
@property(nonatomic,readonly) UITouchPhase        phase; 
</code></pre>
<p>其中的<strong>UITouchPhase</strong>是一个枚举类型，包含：</p>
<blockquote>
<p>UITouchPhaseBegan（触摸开始）<br>
UITouchPhaseMoved（接触点移动）<br>
UITouchPhaseStationary（接触点无移动）<br>
UITouchPhaseEnded（触摸结束）<br>
UITouchPhaseCancelled（触摸取消）</p>
</blockquote>
<h3 id="uitouch的方法">UITouch的方法</h3>
<pre><code>- (CGPoint)locationInView:(UIView *)view;
返回值表示触摸在view上的位置
这里返回的位置是针对view的坐标系的（以view的左上角为原点(0, 0)）
调用时传入的view参数为nil的话，返回的是触摸点在UIWindow的位置

- (CGPoint)previousLocationInView:(UIView *)view;
该方法记录了前一个触摸点的位置
</code></pre>
<h2 id="事件的产生和传递">事件的产生和传递</h2>
<blockquote>
<p>触摸开始，系统会讲触摸事件传递给UIApplication加入到管理的<strong>先进先出</strong>顺序的事件队列中。</p>
<p><strong>UIApplication</strong>按照<strong>先进先出</strong>的规则将事件逐个分发进行处理 ，通常会先分发给程序的<strong>keyWindow</strong>即主窗口，主窗口向下分发到 UIViewController的View，控制器View的视图，视图的子视图，直到寻找到最合适的视图处理触摸事件。</p>
</blockquote>
<hr>
<p><img src="https://upload-images.jianshu.io/upload_images/4395241-307eeb8119016683.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多层级关系.png"></p>
<h3 id="事件传递顺序">事件传递顺序</h3>
<blockquote>
<p>当我们点击了绿色的view的时候，事件是这样传递的，UIApplication -&gt; UIWindow -&gt; 白色的view -&gt; 绿色view</p>
<p>当我们点击了蓝色的view，事件是这样传递的，UIApplication -&gt; &gt;UIWindow -&gt; 白色的view -&gt; 橙色的view -&gt; 蓝色的view</p>
</blockquote>
<p>触摸事件的传递是由父控件传递到子控件，若父控件不能接受触摸事件，诸如：</p>
<blockquote>
<p>不允许与用户交互userInteractionEnabled = NO，<br>
这个控件隐藏了hidden = YES<br>
透明度太小了alpha = 0.0 ~ 0.01</p>
</blockquote>
<p>那么子控件就不可能接受触摸事件。</p>
<h3 id="找到最合适的控件来处理这个触摸事件的呢其实步骤是这样的">找到最合适的控件来处理这个触摸事件的呢？其实步骤是这样的：</h3>
<blockquote>
<ul>
<li>首先它会判断它自己是否能接受触摸事件，如果它不能接收触摸事件，那么它肯定不是最合适的。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>然后再判断用户手指的触摸点是否在它自己的身上，如果不在，那么他就不是最合适的。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>执行完上面两个操作，然后从后往前遍历子控件（意思是先遍历后加入的子控件），然后重复上面的两个步骤。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>如果没有找到复合条件的子控件，那么它自己就是最适合处理事件的控件。</li>
</ul>
</blockquote>
<pre><code>//这个方法就是用来查找最合适处理事件的方法，这个方法可以和第二个方法联合使用
- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event

//这个方法就是用来判断触摸点是否在其身上，返回一个BOOL值 
- (BOOL)pointInside:(CGPoint)point withEvent:(nullable UIEvent *)event;

</code></pre>
<h1 id="二-hittest方法底层实现">二. “hitTest:方法底层实现”</h1>
<pre><code>/**
 * 作用: 寻找最适合响应的View
 * 何时调用: 当一个事件传递给当前View的时候，hitTest:方法就会调用
 * 返回值是啥: 返回的是哪个View，这个View就是最合适响应的View（随后该View就会调用它的touch方法）
 */
- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event {
    // 1.判断自己能否接收事件
    if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt;= 0.01) {
        return nil;
    }
    // 2.判断点是不是在自己身上
    if (![self pointInside:point withEvent:event]) {
        return nil;
    }
    // 3.遍历在子控件，调用子控件的hitTest
    int count = (int)self.subviews.count;
    for (int i = count - 1; i &gt;= 0; i--) { //取子控件规则，又后添加的向前筛选
        UIView *childView = self.subviews[i];
        // 转换成自控件身上的坐标系的点
        CGPoint childViewPoint = [self convertPoint:point toView:childView];
        UIView *fitView = [childView hitTest:childViewPoint withEvent:event];
        if (fitView){ // 子控件上有合适的View则返回该View
            return childView;
        }
    }
    // 没有找到合适的子控件，自己则为合适的响应视图
    return self;
}

/**
 *  作用：判断当前点在不在它调用View上（谁调用了pointInside，这个View就是谁）
 *  何时调用: hitTest:方法内，系统自动就会调用
 *  注意点: point点必须得和它的方法的调用者在同一坐标系里边儿（就是说View1调用了，就得是View1的坐标系）
 */
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event {
    BOOL isMe = [super pointInside:point withEvent:event];
    return isMe;
}
</code></pre>
<h1 id="三-圆形按钮">三. 圆形按钮</h1>
<ul>
<li>判定触摸点是否在圆形范围之内</li>
</ul>
<blockquote>
<p>本例所实现的判定机制采用的是基本的几何运算，也就是检查触摸点是不是在圆形的半径之内</p>
</blockquote>
<pre><code>- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event {
    CGPoint pt;
    float halfSide = 50.0f / 2.0f; //50.0f为UIButton的宽*高
    
    pt.x = (point.x - halfSide) / halfSide;
    pt.y = (point.y - halfSide) / halfSide;
    
    float xsquared = pt.x * pt.x;
    float ysquared = pt.y * pt.y;
    
    if((xsquared + ysquared) &lt; 1.0) return YES;
    return NO;
}

- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event {
    NSLog(@&quot;++++ Valid Touch Events ++++&quot;);
} 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS开发中“xib”与“纯代码”取舍]]></title>
        <id>https://targetnobug.github.io//post/xib-and-code</id>
        <link href="https://targetnobug.github.io//post/xib-and-code">
        </link>
        <updated>2017-08-24T00:59:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-知名app的xib与纯代码使用情况">一. 知名app的xib与纯代码使用情况</h1>
<p><strong>讨论的是：对于 UI 界面的编写工作，到底应该用 xib/storyboard 完成，还是用手写代码来完成？有一些著名的应用，它们也用到了xib</strong></p>
<blockquote>
<p><strong>1.</strong> 像 Twitter，Mailbox，objcio 这样完全不使用 xib 做界面的情况。<br>
<strong>2.</strong> 像 QQ、微信、滴滴打车、网易新闻、猿题库这样少量使用 xib 的情况。<br>
<strong>3.</strong>  像支付宝、大众点评这样重度使用 xib 的情况。<br>
说明了即使是比较著名的 App，在使用 xib/storyboard 上，也有很大的差异。</p>
</blockquote>
<blockquote>
<p>有兴趣的伙伴也可以自己使用<a href="https://gist.github.com/tangqiaoboy/b149d03cfd0cd0c2f7a1">“tangqiao”的脚本</a>分析一下</p>
</blockquote>
<p>其实，我们实际开发中一些简单界面的开发，我们使用xib就足够了，速度快、产出也高效。但是，我们在处理一些UI比较复杂的页面，我们使用纯代码来进行开发，在迭代和修改方面更方便，所以建议复杂的开发还是用纯代码。</p>
<h1 id="二-考虑因素">二. 考虑因素</h1>
<h4 id="1开发效率">1.开发效率</h4>
<p>纯代码编写，界面越复杂，代码量越大，复杂度也随之上升。<br>
使用xib，可以把界面布局相关的代码，属性设置的代码，迁移到xib上，修改了什么马上可以看到效果，所见即所得，界面开发速度快很多；使用xib中的autolayout，屏幕尺寸适配也方便得多。</p>
<h4 id="2可读性">2.可读性</h4>
<p>代码越多，别人读起来越费劲，使用xib，界面层的代码大量减少，可读性极好。</p>
<h4 id="3复用">3.复用</h4>
<p>纯代码可复用，xib比较难复用，有相同或相似界面，基本是复制一份过来修改，复用问题不大。</p>
<h4 id="4版本管理">4.版本管理</h4>
<p>代码的版本管理比较清晰成熟，大家也用得比较顺。xib因为其为xml格式文件，可读性比较差，多人同时修改同一个xib文件时会引起冲突，并且难以合并。所以，做好一个或一系列相关界面使用一个xib,避免多人同时修改一个xib引起冲突。</p>
<p>####5.性能<br>
纯代码的界面加载速度、运行速度是最快的，xib会稍微拉低性能，消耗更多内存，但这对多数普通界面来说，没有太大影响。需要极致的性能和速度的界面，才使用纯代码。<br>
不管是纯代码还是xib,autolayout都不宜使用过多，超过60个，会引起卡顿。</p>
<h1 id="三-优劣">三. 优劣</h1>
<h4 id="使用-xib-和-storyboard-的优点">使用 xib 和 storyboard 的优点</h4>
<ul>
<li>开发界面所见即所得，可以快速通过拖拽构造界面。</li>
<li>你可以从 storyboard 中很方便地梳理出所有<code>View Controller</code>的界面间的调用关系。这一点对于新加入项目组的开发同事来说，比较友好。</li>
<li>使用 Storyboard 可以使用<code>Table View Controller</code>的 Static Cell 功能。对于开发一些 Cell 不多，但每个 Cell 都不一样的列表类设置界面会比较方便。</li>
<li>通过实现 <code>– (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender</code> 方法，每个 View Controller 的跳转逻辑都聚集在一处，这方便我们统一管理界面跳转和传递数据。</li>
<li>Storyboard 可以方便将一些常用功能模块化和复用。例如 WWDC2011 年介绍 Storyboard 的视频就将微博分享功能模块化成一个单独的 Storyboard。</li>
</ul>
<h2 id="使用-xib-和-storyboard-的缺点">使用 xib 和 storyboard 的缺点</h2>
<ul>
<li>xib 对版本管理是灾难。storyboard 实际上的多个 xib 的集合，所以更容易让多人编辑产生冲突。而虽然它们是 xml 格式，但是冲突解决起来还是不如代码那么容易。</li>
<li>苹果对 xib, storyboard 的设计中带有当前电脑的操作系统版本和 Xcode 版本。所以如果两个协作的开发者电脑操作系统或 Xcode 有不一样的话，每次打开必定会修改这个文件。另外即使操作系统版本和 Xcode 版本一样，有些时候打开看也会造成一些自动的修改。</li>
<li>storyboard 带来的 segue 的概念对于开发来说并不省事，特别是在需要传递参数的时候。如果是用程序内部 trigger 一个 segue，那么需要在另一个回调的地方设置 dest view controller 的参数信息。</li>
<li>我们发现 xib 中设置的颜色值并不精确，RGB 在真机 / 模拟器上常常会有 10 多像素的偏差。</li>
<li>xib 和 storyboard 对继承的支持并不友好。无法做界面的继承。</li>
<li>xib 和 storyboard 对搜索支持并不友好，无法方便地在 Xcode 中查找关键词（但是可以通过写 bash 命令来查找）。</li>
<li>storyboard 对组合支持得不太好，不允许在一个 xib 中附带多个子 view。</li>
<li>xib 和 storyboard 不太方便做界面的模块化管理，比如我们想统一修改界面中所有按钮的字体样式，那么在 xib 和 storyboard 只能一个一个手工修改，而如果是代码编写的，则只需要改一个工厂方法的实现即可。</li>
<li>对于复杂的 App，storyboard 的性能会比较差。</li>
<li>开发界面所见即所得，可以快速通过拖拽构造界面。</li>
<li>你可以从 storyboard 中很方便地梳理出所有<code>View Controller</code>的界面间的调用关系。这一点对于新加入项目组的开发同事来说，比较友好。</li>
<li>使用 Storyboard 可以使用<code>Table View Controller</code>的 Static Cell 功能。对于开发一些 Cell 不多，但每个 Cell 都不一样的列表类设置界面会比较方便。</li>
<li>通过实现 <code>– (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender</code> 方法，每个 View Controller 的跳转逻辑都聚集在一处，这方便我们统一管理界面跳转和传递数据。</li>
<li>Storyboard 可以方便将一些常用功能模块化和复用。例如 WWDC2011 年介绍 Storyboard 的视频就将微博分享功能模块化成一个单独的 Storyboard。</li>
</ul>
<h4 id="纯代码的优点">纯代码的优点</h4>
<ul>
<li>高可复用，尤其是有很多相似的控件的时候，很好管理。</li>
<li>版本控制简单许多，多人协作更简单一些(xib线多)，纯代码的话跟踪起来容易一些，合并困难度低</li>
<li>运行效率，大概会快一点</li>
<li>拥有代码逻辑可阅读性</li>
</ul>
<h4 id="纯代码的缺点">纯代码的缺点</h4>
<ul>
<li>调UI要思考的就一些，不那么直观</li>
<li>写基础的UI功能都需要很久</li>
<li></li>
</ul>
<p>#总结： <br>
从以往开发经验，我觉得代码+xib实现App界面，大大提高开发效率、可读性，版本管理的缺陷避免即可。现在App开发已经很成熟，企业开发基本会追求好看的界面效果、更复杂的界面布局，用纯代码实现，代码复杂度急剧加大，极有必要通过xib简化界面代码。另外，企业开发中，版本更新频繁、需求变化多，采用xib才能更快更好的响应这些变化。</p>
<h1 id="参考链接">参考链接</h1>
<blockquote>
<ul>
<li><a href="http://blog.devtang.com/2015/03/21/ios-dev-controversy-">https://gist.github.com/tangqiaoboy/b149d03cfd0cd0c2f7a1</a></li>
<li><a href="https://www.jianshu.com/u/8e880f9927c9">https://www.jianshu.com/u/8e880f9927c9</a></li>
</ul>
</blockquote>
<hr>
]]></content>
    </entry>
</feed>