<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://targetnobug.github.io/</id>
    <title>MPLWade‘s Blog</title>
    <updated>2020-03-21T16:29:28.563Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://targetnobug.github.io/"/>
    <link rel="self" href="https://targetnobug.github.io//atom.xml"/>
    <subtitle>温故而知新，总有收获。。</subtitle>
    <logo>https://targetnobug.github.io//images/avatar.png</logo>
    <icon>https://targetnobug.github.io//favicon.ico</icon>
    <rights>All rights reserved 2020, MPLWade‘s Blog</rights>
    <entry>
        <title type="html"><![CDATA[git：上传git代码以及git使用细节]]></title>
        <id>https://targetnobug.github.io//post/gitshang-chuan-git-dai-ma-yi-ji-git-shi-yong-xi-jie</id>
        <link href="https://targetnobug.github.io//post/gitshang-chuan-git-dai-ma-yi-ji-git-shi-yong-xi-jie">
        </link>
        <updated>2020-03-21T16:26:25.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-向源码方提交">一、向源码方提交</h1>
<h4 id="1注册git账号成功后请登录你的邮箱进行激活">1.注册git账号，成功后，请登录你的邮箱，进行激活。</h4>
<h4 id="2fork你要贡献源码的与项目完成后进入已fork的项目">2.fork你要贡献源码的与项目，完成后，进入已fork的项目。</h4>
<h4 id="3-配置本地git环境未配置点此">3. 配置本地git环境(未配置<a href="https://blog.csdn.net/waterbinbin/article/details/71191897">点此</a>)</h4>
<h4 id="4clone你fork的项目">4.clone你fork的项目</h4>
<p>在任意目录下，使用命令fork自己的项目，即上文已经fork成功的项目地址为：<a href="%5Bhttps://github.com/TargetNoBug/RookieTomatoFM%5D(https://github.com/TargetNoBug/RookieTomatoFM)">https://github.com/GithubUserName/ProjectName</a> （注意：<strong>GithubUserName</strong>这里应该改为<strong>你的用户名</strong>）<br>
<strong>示例：</strong></p>
<pre><code>git clone https://github.com/GithubUserName/RookieTomatoFM
</code></pre>
<h4 id="5-添加远程仓库地址">5. 添加远程仓库地址</h4>
<p>当我们完成上述**“4”<strong>的clone动作后，可以使用如下命令，来</strong>查看你fork的远程仓库的地址**。</p>
<pre><code>git remote -v
</code></pre>
<p>默认的clone操作完成后，<strong>远端仓库的地址</strong>别名为：<strong>origin</strong>，为了需要与原项目保持更新，你还需要将原项目地址给添加进来，使用如下命令可以<strong>添加远端仓库地址</strong>,其中<strong>upstream</strong>为<strong>新的远端仓库的别名</strong>。</p>
<pre><code>git remote add upstream  https://github.com/TargetNoBug/RookieTomatoFM
</code></pre>
<h4 id="6-保持与原项目同步-可选">6. 保持与原项目同步 (可选)</h4>
<p>当<strong>Fork的项目</strong>有更新时，你可以通过以下命令来保持与项目同步：</p>
<p>进入本地存放<strong>RookieTomatoFM</strong>项目的目录：依次执行下列命令：</p>
<ul>
<li>
<ol>
<li>从上游仓库<strong>fetch分支</strong>和提取点</li>
</ol>
</li>
</ul>
<pre><code>git fetch upstream
</code></pre>
<ul>
<li>
<ol start="2">
<li>切换到<strong>本地分支</strong>（建议你切换下）</li>
</ol>
</li>
</ul>
<pre><code>git checkout master
</code></pre>
<ul>
<li>
<ol start="3">
<li>把<strong>upstream/master</strong>分支合并到<strong>本地master</strong>上</li>
</ol>
</li>
</ul>
<pre><code>git merge upstream/master
</code></pre>
<ul>
<li>
<ol start="4">
<li>将<strong>upstream/master</strong>分支更新的内容更新到github中fork的项目上(从本地缓存库，提交至git远程库)，就直接</li>
</ol>
</li>
</ul>
<pre><code>git push origin master
</code></pre>
<h4 id="7-提交本地代码至github的fork上">7. 提交本地代码至github的fork上</h4>
<p>进入本地<strong>RookieTomatoFM</strong>目录,执行以下命令：</p>
<pre><code>git add .
git commit -m &quot;有效注释&quot;
git push
即可将本地的代码更新到github的fork上了
</code></pre>
<h4 id="8-将github的fork更新合并至主干">8. 将github的fork更新合并至主干</h4>
<p>访问github登录，进入你fork的,如下图所示发起merge请求,等待源项目方审核通过并且合并进源项目。<br>
<img src="https://upload-images.jianshu.io/upload_images/4395241-bdcf2aaa351eb10e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="示例项目.jpg"></p>
<h1 id="二-向自己github创建的repository提交">二、向自己GitHub创建的repository提交</h1>
<h4 id="1-cd到你的本地项目根目录下再执行git命令">1、cd到你的本地项目根目录下，再执行git命令</h4>
<pre><code>cd /Users/FilePath/Desktop/RookieTomatoFM
</code></pre>
<h4 id="2-git本地仓库初始化">2、git本地仓库初始化</h4>
<pre><code>git init 
</code></pre>
<h4 id="3-将本地项目的所有文件添加到暂存区中">3、将本地项目的所有文件添加到暂存区中</h4>
<pre><code>git add .
</code></pre>
<h4 id="4-将暂存区的文件提交到git本地仓库双引号里面写注释语句-xxxx表示本次提交的说明注释">4、将暂存区的文件提交到git本地仓库，双引号里面写注释语句 (&quot;XXXX&quot;表示本次提交的说明/注释)</h4>
<pre><code>git commit -m &quot;XXXX&quot;
</code></pre>
<h4 id="5-将git本地仓库和github远程仓库关联在github中打开要上传项目的远程仓库得到网址httpsgithubcomtargetnobugrookietomatofm">5、将git本地仓库和Github远程仓库关联，在github中打开要上传项目的远程仓库，得到网址<a href="https://github.com/TargetNoBug/RookieTomatoFM">https://github.com/TargetNoBug/RookieTomatoFM</a></h4>
<pre><code>git remote add origin https://github.com/TargetNoBug/RookieTomatoFM
</code></pre>
<h4 id="6-从远程仓库pull获取远程仓库的文件到本地仓库">6、从远程仓库pull，获取远程仓库的文件到本地仓库</h4>
<pre><code>git pull origin master
</code></pre>
<p><strong>注意：</strong> <strong>第6步</strong>可能会<strong>git pull</strong> 失败 ,提示：<strong>fatal: refusing to merge unrelated histories</strong>，这个问题是因为两个根本不相干的git 库，一个是本地库，一个是远端库，然后本地要去推送到远端，远端觉得这个本地库跟自己不相干，所以告知无法合并，此时使用：</p>
<pre><code>`git pull origin master --allow-unrelated-histories`
</code></pre>
<p>后面加上**--allow-unrelated-histories**，把两段不相干的分支进行强行合并。</p>
<h4 id="7-将代码由本地仓库上传到github远程仓库此处可能我们会查看当前是否在master使用命令git-check-master">7、将代码由本地仓库上传到<strong>Github远程仓库</strong>（此处，可能我们会查看当前是否在<strong>master</strong>，使用命令：<strong>git check master</strong>）</h4>
<pre><code>git push -u origin master
</code></pre>
<ul>
<li>
<h4 id="附加">附加：</h4>
<p>1、注册trunk<br>
<code>pod trunk register 'Github账户对应邮箱' 'Github账户对应用户名' --verbose</code><br>
2、查看注册信息<br>
<code>pod trunk me</code><br>
3、验证.podspec文件<br>
<code>pod lib lint</code><br>
（有WARN则需用 <code>pod lib lint --allow-warnings</code>）<br>
4、验证通过无ERROR<br>
<code>pod trunk push RookieTomatoFM.podspec</code><br>
（有WARN则需用 <code>pod trunk push RookieTomatoFM.podspec --allow-warnings</code>）<br>
5、查看某个pods信息<br>
<code>pod trunk info RookieTomatoFM</code><br>
6、删除pods的某个版本<br>
<code>pod trunk delete RookieTomatoFM 0.0.1</code><br>
7、添加其他pods维护者<br>
<code>pod trunk add-owner 仓库名 邮箱</code></p>
</li>
</ul>
<p>注：<a href="https://www.jianshu.com/p/d7c28c2dce14">修改name等信息</a></p>
<p>…………………………………………………………………………………………<br>
1、pod查看版本号<br>
<code>pod --version</code></p>
<p>2、pod升级更新<br>
<code>sudo gem install cocoapods --pre</code><br>
**注意：**当你升级遇到以下报错时，使用<br>
<code>sudo gem install cocoapods -n /usr/local/bin</code><br>
<strong>报错:</strong><br>
<code>ERROR: While executing gem ... (Gem::FilePermissionError)</code><br>
<code>You don't have write permissions for the /usr/bin directory.</code></p>
<p>3、pod库更新</p>
<pre><code>`pod repo update`
</code></pre>
<h1 id="三-git小细节-更多git细节点击">三、git小细节 （更多git细节<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE">点击</a>）</h1>
<p>Git 可以给仓库历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（ <code>v1.0</code> 、 <code>v2.0</code>等等）。</p>
<h4 id="1-列出已有的标签">1. 列出已有的标签</h4>
<p>在 Git 中列出已有的标签非常简单，只需要输入 <code>git tag</code>（可带上可选的 <code>-l</code>选项 <code>--list</code>）：</p>
<pre><code>$ git tag
v1.0
v2.0
</code></pre>
<p><code>git tag</code>命令以字母顺序列出标签，但它显示的顺序并不重要。<br>
你也可以按照特定的模式查找标签。 例如，Git 自身的源代码仓库包含标签的数量超过 500 个。 如果只对 1.8.5 系列感兴趣，可以运行：</p>
<pre><code>$ git tag -l &quot;v1.8.5*&quot;
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
</code></pre>
<p><strong>tips</strong>:</p>
<ul>
<li>按照通配符列出标签需要 -l 或 --list 选项<br>
如果你只想要完整的标签列表，那么运行 git tag 就会默认假定你想要一个列表，它会直接给你列出来， 此时的 -l 或 --list 是可选的。</li>
<li>然而，如果你提供了一个匹配标签名的通配模式，那么 -l 或 --list 就是强制使用的。</li>
</ul>
<h4 id="2-如何创建和删除新的标签">2. 如何创建和删除新的标签</h4>
<ul>
<li>
<p>Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。</p>
</li>
<li>
<p>轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。</p>
</li>
<li>
<p>附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。</p>
</li>
</ul>
<p><strong>附注标签</strong>:<br>
最简单的方式是当你在运行 tag 命令时指定 -a 选项：</p>
<pre><code>$ git tag -a v1.4 -m &quot;my version 1.4&quot;
$ git tag
v0.1
v1.3
v1.4
</code></pre>
<p>-m 选项指定了一条将会存储在标签中的信息。 如果没有为附注标签指定一条信息，Git 会启动编辑器要求你输入信息。</p>
<p>通过使用 git show 命令可以看到标签信息和与之对应的提交信息：</p>
<pre><code>$ git show v1.4
tag v1.4
Tagger: Ben Straub &lt;ben@straub.cc&gt;
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
</code></pre>
<p>输出显示了打标签者的信息、打标签的日期时间、附注信息，然后显示具体的提交信息。</p>
<p><strong>轻量标签</strong><br>
另一种给提交打标签的方式是使用轻量标签。 轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：</p>
<pre><code>$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
</code></pre>
<h4 id="3-不同类型的标签分别是什么">3. 不同类型的标签分别是什么</h4>
<h1 id="参考链接">参考链接</h1>
<blockquote>
<p><a href="https://www.jianshu.com/p/bed0df7fbfc4">https://www.jianshu.com/p/bed0df7fbfc4</a><br>
<a href="https://www.jianshu.com/p/52d7c6cb7b35">https://www.jianshu.com/p/52d7c6cb7b35</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git：上传git代码以及git使用细节]]></title>
        <id>https://targetnobug.github.io//post/git-use-detail</id>
        <link href="https://targetnobug.github.io//post/git-use-detail">
        </link>
        <updated>2019-12-30T16:28:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-向源码方提交">一、向源码方提交</h1>
<h4 id="1注册git账号成功后请登录你的邮箱进行激活">1.注册git账号，成功后，请登录你的邮箱，进行激活。</h4>
<h4 id="2fork你要贡献源码的与项目完成后进入已fork的项目">2.fork你要贡献源码的与项目，完成后，进入已fork的项目。</h4>
<h4 id="3-配置本地git环境未配置点此">3. 配置本地git环境(未配置<a href="https://blog.csdn.net/waterbinbin/article/details/71191897">点此</a>)</h4>
<h4 id="4clone你fork的项目">4.clone你fork的项目</h4>
<p>在任意目录下，使用命令fork自己的项目，即上文已经fork成功的项目地址为：<a href="%5Bhttps://github.com/TargetNoBug/RookieTomatoFM%5D(https://github.com/TargetNoBug/RookieTomatoFM)">https://github.com/GithubUserName/ProjectName</a> （注意：<strong>GithubUserName</strong>这里应该改为<strong>你的用户名</strong>）<br>
<strong>示例：</strong></p>
<pre><code>git clone https://github.com/GithubUserName/RookieTomatoFM
</code></pre>
<h4 id="5-添加远程仓库地址">5. 添加远程仓库地址</h4>
<p>当我们完成上述**“4”<strong>的clone动作后，可以使用如下命令，来</strong>查看你fork的远程仓库的地址**。</p>
<pre><code>git remote -v
</code></pre>
<p>默认的clone操作完成后，<strong>远端仓库的地址</strong>别名为：<strong>origin</strong>，为了需要与原项目保持更新，你还需要将原项目地址给添加进来，使用如下命令可以<strong>添加远端仓库地址</strong>,其中<strong>upstream</strong>为<strong>新的远端仓库的别名</strong>。</p>
<pre><code>git remote add upstream  https://github.com/TargetNoBug/RookieTomatoFM
</code></pre>
<h4 id="6-保持与原项目同步-可选">6. 保持与原项目同步 (可选)</h4>
<p>当<strong>Fork的项目</strong>有更新时，你可以通过以下命令来保持与项目同步：</p>
<p>进入本地存放<strong>RookieTomatoFM</strong>项目的目录：依次执行下列命令：</p>
<ul>
<li>
<ol>
<li>从上游仓库<strong>fetch分支</strong>和提取点</li>
</ol>
</li>
</ul>
<pre><code>git fetch upstream
</code></pre>
<ul>
<li>
<ol start="2">
<li>切换到<strong>本地分支</strong>（建议你切换下）</li>
</ol>
</li>
</ul>
<pre><code>git checkout master
</code></pre>
<ul>
<li>
<ol start="3">
<li>把<strong>upstream/master</strong>分支合并到<strong>本地master</strong>上</li>
</ol>
</li>
</ul>
<pre><code>git merge upstream/master
</code></pre>
<ul>
<li>
<ol start="4">
<li>将<strong>upstream/master</strong>分支更新的内容更新到github中fork的项目上(从本地缓存库，提交至git远程库)，就直接</li>
</ol>
</li>
</ul>
<pre><code>git push origin master
</code></pre>
<h4 id="7-提交本地代码至github的fork上">7. 提交本地代码至github的fork上</h4>
<p>进入本地<strong>RookieTomatoFM</strong>目录,执行以下命令：</p>
<pre><code>git add .
git commit -m &quot;有效注释&quot;
git push
即可将本地的代码更新到github的fork上了
</code></pre>
<h4 id="8-将github的fork更新合并至主干">8. 将github的fork更新合并至主干</h4>
<p>访问github登录，进入你fork的,如下图所示发起merge请求,等待源项目方审核通过并且合并进源项目。<br>
<img src="https://upload-images.jianshu.io/upload_images/4395241-bdcf2aaa351eb10e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="示例项目.jpg"></p>
<h1 id="二-向自己github创建的repository提交">二、向自己GitHub创建的repository提交</h1>
<h4 id="1-cd到你的本地项目根目录下再执行git命令">1、cd到你的本地项目根目录下，再执行git命令</h4>
<pre><code>cd /Users/FilePath/Desktop/RookieTomatoFM
</code></pre>
<h4 id="2-git本地仓库初始化">2、git本地仓库初始化</h4>
<pre><code>git init 
</code></pre>
<h4 id="3-将本地项目的所有文件添加到暂存区中">3、将本地项目的所有文件添加到暂存区中</h4>
<pre><code>git add .
</code></pre>
<h4 id="4-将暂存区的文件提交到git本地仓库双引号里面写注释语句-xxxx表示本次提交的说明注释">4、将暂存区的文件提交到git本地仓库，双引号里面写注释语句 (&quot;XXXX&quot;表示本次提交的说明/注释)</h4>
<pre><code>git commit -m &quot;XXXX&quot;
</code></pre>
<h4 id="5-将git本地仓库和github远程仓库关联在github中打开要上传项目的远程仓库得到网址httpsgithubcomtargetnobugrookietomatofm">5、将git本地仓库和Github远程仓库关联，在github中打开要上传项目的远程仓库，得到网址<a href="https://github.com/TargetNoBug/RookieTomatoFM">https://github.com/TargetNoBug/RookieTomatoFM</a></h4>
<pre><code>git remote add origin https://github.com/TargetNoBug/RookieTomatoFM
</code></pre>
<h4 id="6-从远程仓库pull获取远程仓库的文件到本地仓库">6、从远程仓库pull，获取远程仓库的文件到本地仓库</h4>
<pre><code>git pull origin master
</code></pre>
<p><strong>注意：</strong> <strong>第6步</strong>可能会<strong>git pull</strong> 失败 ,提示：<strong>fatal: refusing to merge unrelated histories</strong>，这个问题是因为两个根本不相干的git 库，一个是本地库，一个是远端库，然后本地要去推送到远端，远端觉得这个本地库跟自己不相干，所以告知无法合并，此时使用：</p>
<pre><code>`git pull origin master --allow-unrelated-histories`
</code></pre>
<p>后面加上**--allow-unrelated-histories**，把两段不相干的分支进行强行合并。</p>
<h4 id="7-将代码由本地仓库上传到github远程仓库此处可能我们会查看当前是否在master使用命令git-check-master">7、将代码由本地仓库上传到<strong>Github远程仓库</strong>（此处，可能我们会查看当前是否在<strong>master</strong>，使用命令：<strong>git check master</strong>）</h4>
<pre><code>git push -u origin master
</code></pre>
<ul>
<li>
<h4 id="附加">附加：</h4>
<p>1、注册trunk<br>
<code>pod trunk register 'Github账户对应邮箱' 'Github账户对应用户名' --verbose</code><br>
2、查看注册信息<br>
<code>pod trunk me</code><br>
3、验证.podspec文件<br>
<code>pod lib lint</code><br>
（有WARN则需用 <code>pod lib lint --allow-warnings</code>）<br>
4、验证通过无ERROR<br>
<code>pod trunk push RookieTomatoFM.podspec</code><br>
（有WARN则需用 <code>pod trunk push RookieTomatoFM.podspec --allow-warnings</code>）<br>
5、查看某个pods信息<br>
<code>pod trunk info RookieTomatoFM</code><br>
6、删除pods的某个版本<br>
<code>pod trunk delete RookieTomatoFM 0.0.1</code><br>
7、添加其他pods维护者<br>
<code>pod trunk add-owner 仓库名 邮箱</code></p>
</li>
</ul>
<p>注：<a href="https://www.jianshu.com/p/d7c28c2dce14">修改name等信息</a></p>
<p>…………………………………………………………………………………………<br>
1、pod查看版本号<br>
<code>pod --version</code></p>
<p>2、pod升级更新<br>
<code>sudo gem install cocoapods --pre</code><br>
**注意：**当你升级遇到以下报错时，使用<br>
<code>sudo gem install cocoapods -n /usr/local/bin</code><br>
<strong>报错:</strong><br>
<code>ERROR: While executing gem ... (Gem::FilePermissionError)</code><br>
<code>You don't have write permissions for the /usr/bin directory.</code></p>
<p>3、pod库更新</p>
<pre><code>`pod repo update`
</code></pre>
<h1 id="三-git小细节-更多git细节点击">三、git小细节 （更多git细节<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE">点击</a>）</h1>
<p>Git 可以给仓库历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（ <code>v1.0</code> 、 <code>v2.0</code>等等）。</p>
<h4 id="1-列出已有的标签">1. 列出已有的标签</h4>
<p>在 Git 中列出已有的标签非常简单，只需要输入 <code>git tag</code>（可带上可选的 <code>-l</code>选项 <code>--list</code>）：</p>
<pre><code>$ git tag
v1.0
v2.0
</code></pre>
<p><code>git tag</code>命令以字母顺序列出标签，但它显示的顺序并不重要。<br>
你也可以按照特定的模式查找标签。 例如，Git 自身的源代码仓库包含标签的数量超过 500 个。 如果只对 1.8.5 系列感兴趣，可以运行：</p>
<pre><code>$ git tag -l &quot;v1.8.5*&quot;
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
</code></pre>
<p><strong>tips</strong>:</p>
<ul>
<li>按照通配符列出标签需要 -l 或 --list 选项<br>
如果你只想要完整的标签列表，那么运行 git tag 就会默认假定你想要一个列表，它会直接给你列出来， 此时的 -l 或 --list 是可选的。</li>
<li>然而，如果你提供了一个匹配标签名的通配模式，那么 -l 或 --list 就是强制使用的。</li>
</ul>
<h4 id="2-如何创建和删除新的标签">2. 如何创建和删除新的标签</h4>
<ul>
<li>
<p>Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。</p>
</li>
<li>
<p>轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。</p>
</li>
<li>
<p>附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。</p>
</li>
</ul>
<p><strong>附注标签</strong>:<br>
最简单的方式是当你在运行 tag 命令时指定 -a 选项：</p>
<pre><code>$ git tag -a v1.4 -m &quot;my version 1.4&quot;
$ git tag
v0.1
v1.3
v1.4
</code></pre>
<p>-m 选项指定了一条将会存储在标签中的信息。 如果没有为附注标签指定一条信息，Git 会启动编辑器要求你输入信息。</p>
<p>通过使用 git show 命令可以看到标签信息和与之对应的提交信息：</p>
<pre><code>$ git show v1.4
tag v1.4
Tagger: Ben Straub &lt;ben@straub.cc&gt;
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
</code></pre>
<p>输出显示了打标签者的信息、打标签的日期时间、附注信息，然后显示具体的提交信息。</p>
<p><strong>轻量标签</strong><br>
另一种给提交打标签的方式是使用轻量标签。 轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：</p>
<pre><code>$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
</code></pre>
<h4 id="3-不同类型的标签分别是什么">3. 不同类型的标签分别是什么</h4>
<h1 id="参考链接">参考链接</h1>
<blockquote>
<p><a href="https://www.jianshu.com/p/bed0df7fbfc4">https://www.jianshu.com/p/bed0df7fbfc4</a><br>
<a href="https://www.jianshu.com/p/52d7c6cb7b35">https://www.jianshu.com/p/52d7c6cb7b35</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[响应者链条与圆形按钮]]></title>
        <id>https://targetnobug.github.io//post/xiang-ying-zhe-lian-tiao-yu-yuan-xing-an-niu</id>
        <link href="https://targetnobug.github.io//post/xiang-ying-zhe-lian-tiao-yu-yuan-xing-an-niu">
        </link>
        <updated>2017-08-24T19:51:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-事件传递过程">一 . “事件传递过程”</h1>
<h2 id="1问题描述">1.问题描述</h2>
<h3 id="1-a和c是普通的view-b是一个绑定事件的按钮a添加了点击手势-此时点击c响应a的tap手势事件还是b的按钮点击事件">1. A和C是普通的view, B是一个绑定事件的按钮，A添加了点击手势。 此时点击C，响应A的tap手势事件？还是B的按钮点击事件？</h3>
<p><img src="https://upload-images.jianshu.io/upload_images/4395241-72327d4221a72fc4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="视图布局示例"></p>
<h2 id="2-运行结果">2. 运行结果</h2>
<blockquote>
<ol>
<li>C视图开启用户交互时，此次响应的是A视图的tap手势事件</li>
<li>禁用C视图用户交互时，此次响应的是B视图的按钮点击事件</li>
</ol>
</blockquote>
<p><strong>但是为啥？</strong></p>
<h2 id="3触摸事件">3.触摸事件</h2>
<blockquote>
<p>1&gt; 只要继承<strong>UIResponder</strong>就能能够响应并处理触摸事件<br>
2&gt; <strong>UIResponder</strong>包三种事件：<strong>触摸事件</strong>、<strong>加速计事件</strong>、<strong>远程控制事件</strong></p>
</blockquote>
<h3 id="触摸事件方法">触摸事件方法</h3>
<pre><code>- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;
- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;
</code></pre>
<p>以上三个方法中，其中都包含着<strong>UITouch</strong>对象。</p>
<blockquote>
<p>1&gt; UITouch的作用就是它会保存着这个手指相关的一些信息，触摸时间，位置，阶段等之类的信息。</p>
</blockquote>
<blockquote>
<p>2&gt; 当手指移动时，系统会更新同一个UITouch对象，使之能够一直保存该手指在的触摸位置, 当手指头离开屏幕的时候，那么与之对应的UITouch对象就会销毁了。</p>
</blockquote>
<h3 id="uitouch的属性">UITouch的属性</h3>
<pre><code>触摸产生时所处的窗口
@property(nonatomic,readonly,retain) UIWindow    *window;

触摸产生时所处的视图
@property(nonatomic,readonly,retain) UIView      *view;

短时间内点按屏幕的次数，可以根据tapCount判断单击、双击或更多的点击
@property(nonatomic,readonly) NSUInteger          tapCount;

记录了触摸事件产生或变化时的时间，单位是秒
@property(nonatomic,readonly) NSTimeInterval      timestamp;

当前触摸事件所处的状态
@property(nonatomic,readonly) UITouchPhase        phase; 
</code></pre>
<p>其中的<strong>UITouchPhase</strong>是一个枚举类型，包含：</p>
<blockquote>
<p>UITouchPhaseBegan（触摸开始）<br>
UITouchPhaseMoved（接触点移动）<br>
UITouchPhaseStationary（接触点无移动）<br>
UITouchPhaseEnded（触摸结束）<br>
UITouchPhaseCancelled（触摸取消）</p>
</blockquote>
<h3 id="uitouch的方法">UITouch的方法</h3>
<pre><code>- (CGPoint)locationInView:(UIView *)view;
返回值表示触摸在view上的位置
这里返回的位置是针对view的坐标系的（以view的左上角为原点(0, 0)）
调用时传入的view参数为nil的话，返回的是触摸点在UIWindow的位置

- (CGPoint)previousLocationInView:(UIView *)view;
该方法记录了前一个触摸点的位置
</code></pre>
<h2 id="事件的产生和传递">事件的产生和传递</h2>
<blockquote>
<p>触摸开始，系统会讲触摸事件传递给UIApplication加入到管理的<strong>先进先出</strong>顺序的事件队列中。</p>
<p><strong>UIApplication</strong>按照<strong>先进先出</strong>的规则将事件逐个分发进行处理 ，通常会先分发给程序的<strong>keyWindow</strong>即主窗口，主窗口向下分发到 UIViewController的View，控制器View的视图，视图的子视图，直到寻找到最合适的视图处理触摸事件。</p>
</blockquote>
<hr>
<p><img src="https://upload-images.jianshu.io/upload_images/4395241-307eeb8119016683.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多层级关系.png"></p>
<h3 id="事件传递顺序">事件传递顺序</h3>
<blockquote>
<p>当我们点击了绿色的view的时候，事件是这样传递的，UIApplication -&gt; UIWindow -&gt; 白色的view -&gt; 绿色view</p>
<p>当我们点击了蓝色的view，事件是这样传递的，UIApplication -&gt; &gt;UIWindow -&gt; 白色的view -&gt; 橙色的view -&gt; 蓝色的view</p>
</blockquote>
<p>触摸事件的传递是由父控件传递到子控件，若父控件不能接受触摸事件，诸如：</p>
<blockquote>
<p>不允许与用户交互userInteractionEnabled = NO，<br>
这个控件隐藏了hidden = YES<br>
透明度太小了alpha = 0.0 ~ 0.01</p>
</blockquote>
<p>那么子控件就不可能接受触摸事件。</p>
<h3 id="找到最合适的控件来处理这个触摸事件的呢其实步骤是这样的">找到最合适的控件来处理这个触摸事件的呢？其实步骤是这样的：</h3>
<blockquote>
<ul>
<li>首先它会判断它自己是否能接受触摸事件，如果它不能接收触摸事件，那么它肯定不是最合适的。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>然后再判断用户手指的触摸点是否在它自己的身上，如果不在，那么他就不是最合适的。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>执行完上面两个操作，然后从后往前遍历子控件（意思是先遍历后加入的子控件），然后重复上面的两个步骤。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>如果没有找到复合条件的子控件，那么它自己就是最适合处理事件的控件。</li>
</ul>
</blockquote>
<pre><code>//这个方法就是用来查找最合适处理事件的方法，这个方法可以和第二个方法联合使用
- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event

//这个方法就是用来判断触摸点是否在其身上，返回一个BOOL值 
- (BOOL)pointInside:(CGPoint)point withEvent:(nullable UIEvent *)event;

</code></pre>
<h1 id="二-hittest方法底层实现">二. “hitTest:方法底层实现”</h1>
<pre><code>/**
 * 作用: 寻找最适合响应的View
 * 何时调用: 当一个事件传递给当前View的时候，hitTest:方法就会调用
 * 返回值是啥: 返回的是哪个View，这个View就是最合适响应的View（随后该View就会调用它的touch方法）
 */
- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event {
    // 1.判断自己能否接收事件
    if (self.userInteractionEnabled == NO || self.hidden == YES || self.alpha &lt;= 0.01) {
        return nil;
    }
    // 2.判断点是不是在自己身上
    if (![self pointInside:point withEvent:event]) {
        return nil;
    }
    // 3.遍历在子控件，调用子控件的hitTest
    int count = (int)self.subviews.count;
    for (int i = count - 1; i &gt;= 0; i--) { //取子控件规则，又后添加的向前筛选
        UIView *childView = self.subviews[i];
        // 转换成自控件身上的坐标系的点
        CGPoint childViewPoint = [self convertPoint:point toView:childView];
        UIView *fitView = [childView hitTest:childViewPoint withEvent:event];
        if (fitView){ // 子控件上有合适的View则返回该View
            return childView;
        }
    }
    // 没有找到合适的子控件，自己则为合适的响应视图
    return self;
}

/**
 *  作用：判断当前点在不在它调用View上（谁调用了pointInside，这个View就是谁）
 *  何时调用: hitTest:方法内，系统自动就会调用
 *  注意点: point点必须得和它的方法的调用者在同一坐标系里边儿（就是说View1调用了，就得是View1的坐标系）
 */
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event {
    BOOL isMe = [super pointInside:point withEvent:event];
    return isMe;
}
</code></pre>
<h1 id="三-圆形按钮">三. 圆形按钮</h1>
<ul>
<li>判定触摸点是否在圆形范围之内</li>
</ul>
<blockquote>
<p>本例所实现的判定机制采用的是基本的几何运算，也就是检查触摸点是不是在圆形的半径之内</p>
</blockquote>
<pre><code>- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event {
    CGPoint pt;
    float halfSide = 50.0f / 2.0f; //50.0f为UIButton的宽*高
    
    pt.x = (point.x - halfSide) / halfSide;
    pt.y = (point.y - halfSide) / halfSide;
    
    float xsquared = pt.x * pt.x;
    float ysquared = pt.y * pt.y;
    
    if((xsquared + ysquared) &lt; 1.0) return YES;
    return NO;
}

- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event {
    NSLog(@&quot;++++ Valid Touch Events ++++&quot;);
} 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS开发中“xib”与“纯代码”取舍]]></title>
        <id>https://targetnobug.github.io//post/xib-and-code</id>
        <link href="https://targetnobug.github.io//post/xib-and-code">
        </link>
        <updated>2017-08-24T00:59:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-知名app的xib与纯代码使用情况">一. 知名app的xib与纯代码使用情况</h1>
<p><strong>讨论的是：对于 UI 界面的编写工作，到底应该用 xib/storyboard 完成，还是用手写代码来完成？有一些著名的应用，它们也用到了xib</strong></p>
<blockquote>
<p><strong>1.</strong> 像 Twitter，Mailbox，objcio 这样完全不使用 xib 做界面的情况。<br>
<strong>2.</strong> 像 QQ、微信、滴滴打车、网易新闻、猿题库这样少量使用 xib 的情况。<br>
<strong>3.</strong>  像支付宝、大众点评这样重度使用 xib 的情况。<br>
说明了即使是比较著名的 App，在使用 xib/storyboard 上，也有很大的差异。</p>
</blockquote>
<blockquote>
<p>有兴趣的伙伴也可以自己使用<a href="https://gist.github.com/tangqiaoboy/b149d03cfd0cd0c2f7a1">“tangqiao”的脚本</a>分析一下</p>
</blockquote>
<p>其实，我们实际开发中一些简单界面的开发，我们使用xib就足够了，速度快、产出也高效。但是，我们在处理一些UI比较复杂的页面，我们使用纯代码来进行开发，在迭代和修改方面更方便，所以建议复杂的开发还是用纯代码。</p>
<h1 id="二-考虑因素">二. 考虑因素</h1>
<h4 id="1开发效率">1.开发效率</h4>
<p>纯代码编写，界面越复杂，代码量越大，复杂度也随之上升。<br>
使用xib，可以把界面布局相关的代码，属性设置的代码，迁移到xib上，修改了什么马上可以看到效果，所见即所得，界面开发速度快很多；使用xib中的autolayout，屏幕尺寸适配也方便得多。</p>
<h4 id="2可读性">2.可读性</h4>
<p>代码越多，别人读起来越费劲，使用xib，界面层的代码大量减少，可读性极好。</p>
<h4 id="3复用">3.复用</h4>
<p>纯代码可复用，xib比较难复用，有相同或相似界面，基本是复制一份过来修改，复用问题不大。</p>
<h4 id="4版本管理">4.版本管理</h4>
<p>代码的版本管理比较清晰成熟，大家也用得比较顺。xib因为其为xml格式文件，可读性比较差，多人同时修改同一个xib文件时会引起冲突，并且难以合并。所以，做好一个或一系列相关界面使用一个xib,避免多人同时修改一个xib引起冲突。</p>
<p>####5.性能<br>
纯代码的界面加载速度、运行速度是最快的，xib会稍微拉低性能，消耗更多内存，但这对多数普通界面来说，没有太大影响。需要极致的性能和速度的界面，才使用纯代码。<br>
不管是纯代码还是xib,autolayout都不宜使用过多，超过60个，会引起卡顿。</p>
<h1 id="三-优劣">三. 优劣</h1>
<h4 id="使用-xib-和-storyboard-的优点">使用 xib 和 storyboard 的优点</h4>
<ul>
<li>开发界面所见即所得，可以快速通过拖拽构造界面。</li>
<li>你可以从 storyboard 中很方便地梳理出所有<code>View Controller</code>的界面间的调用关系。这一点对于新加入项目组的开发同事来说，比较友好。</li>
<li>使用 Storyboard 可以使用<code>Table View Controller</code>的 Static Cell 功能。对于开发一些 Cell 不多，但每个 Cell 都不一样的列表类设置界面会比较方便。</li>
<li>通过实现 <code>– (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender</code> 方法，每个 View Controller 的跳转逻辑都聚集在一处，这方便我们统一管理界面跳转和传递数据。</li>
<li>Storyboard 可以方便将一些常用功能模块化和复用。例如 WWDC2011 年介绍 Storyboard 的视频就将微博分享功能模块化成一个单独的 Storyboard。</li>
</ul>
<h2 id="使用-xib-和-storyboard-的缺点">使用 xib 和 storyboard 的缺点</h2>
<ul>
<li>xib 对版本管理是灾难。storyboard 实际上的多个 xib 的集合，所以更容易让多人编辑产生冲突。而虽然它们是 xml 格式，但是冲突解决起来还是不如代码那么容易。</li>
<li>苹果对 xib, storyboard 的设计中带有当前电脑的操作系统版本和 Xcode 版本。所以如果两个协作的开发者电脑操作系统或 Xcode 有不一样的话，每次打开必定会修改这个文件。另外即使操作系统版本和 Xcode 版本一样，有些时候打开看也会造成一些自动的修改。</li>
<li>storyboard 带来的 segue 的概念对于开发来说并不省事，特别是在需要传递参数的时候。如果是用程序内部 trigger 一个 segue，那么需要在另一个回调的地方设置 dest view controller 的参数信息。</li>
<li>我们发现 xib 中设置的颜色值并不精确，RGB 在真机 / 模拟器上常常会有 10 多像素的偏差。</li>
<li>xib 和 storyboard 对继承的支持并不友好。无法做界面的继承。</li>
<li>xib 和 storyboard 对搜索支持并不友好，无法方便地在 Xcode 中查找关键词（但是可以通过写 bash 命令来查找）。</li>
<li>storyboard 对组合支持得不太好，不允许在一个 xib 中附带多个子 view。</li>
<li>xib 和 storyboard 不太方便做界面的模块化管理，比如我们想统一修改界面中所有按钮的字体样式，那么在 xib 和 storyboard 只能一个一个手工修改，而如果是代码编写的，则只需要改一个工厂方法的实现即可。</li>
<li>对于复杂的 App，storyboard 的性能会比较差。</li>
<li>开发界面所见即所得，可以快速通过拖拽构造界面。</li>
<li>你可以从 storyboard 中很方便地梳理出所有<code>View Controller</code>的界面间的调用关系。这一点对于新加入项目组的开发同事来说，比较友好。</li>
<li>使用 Storyboard 可以使用<code>Table View Controller</code>的 Static Cell 功能。对于开发一些 Cell 不多，但每个 Cell 都不一样的列表类设置界面会比较方便。</li>
<li>通过实现 <code>– (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender</code> 方法，每个 View Controller 的跳转逻辑都聚集在一处，这方便我们统一管理界面跳转和传递数据。</li>
<li>Storyboard 可以方便将一些常用功能模块化和复用。例如 WWDC2011 年介绍 Storyboard 的视频就将微博分享功能模块化成一个单独的 Storyboard。</li>
</ul>
<h4 id="纯代码的优点">纯代码的优点</h4>
<ul>
<li>高可复用，尤其是有很多相似的控件的时候，很好管理。</li>
<li>版本控制简单许多，多人协作更简单一些(xib线多)，纯代码的话跟踪起来容易一些，合并困难度低</li>
<li>运行效率，大概会快一点</li>
<li>拥有代码逻辑可阅读性</li>
</ul>
<h4 id="纯代码的缺点">纯代码的缺点</h4>
<ul>
<li>调UI要思考的就一些，不那么直观</li>
<li>写基础的UI功能都需要很久</li>
<li></li>
</ul>
<p>#总结： <br>
从以往开发经验，我觉得代码+xib实现App界面，大大提高开发效率、可读性，版本管理的缺陷避免即可。现在App开发已经很成熟，企业开发基本会追求好看的界面效果、更复杂的界面布局，用纯代码实现，代码复杂度急剧加大，极有必要通过xib简化界面代码。另外，企业开发中，版本更新频繁、需求变化多，采用xib才能更快更好的响应这些变化。</p>
<h1 id="参考链接">参考链接</h1>
<blockquote>
<ul>
<li><a href="http://blog.devtang.com/2015/03/21/ios-dev-controversy-">https://gist.github.com/tangqiaoboy/b149d03cfd0cd0c2f7a1</a></li>
<li><a href="https://www.jianshu.com/u/8e880f9927c9">https://www.jianshu.com/u/8e880f9927c9</a></li>
</ul>
</blockquote>
<hr>
]]></content>
    </entry>
</feed>